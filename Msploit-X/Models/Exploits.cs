using System;
using System.Collections.ObjectModel;
using System.IO;
using DynamicData;
using ReactiveUI;

namespace Msploit_X.Models
{
    public class Exploits : ReactiveObject
    {
        private bool isCurrentTab = false;

        public bool IsCurrentTab
        {
            get => isCurrentTab;
            set => this.RaiseAndSetIfChanged(ref isCurrentTab, value);
        }
        
        private string exploitText = "";

        public string ExploitText
        {
            get => exploitText;
            set => this.RaiseAndSetIfChanged(ref exploitText, value);
        }
        
        public ObservableCollection<Node> Items { get; }

        private Node selectedItem;
        public Node SelectedItem
        {
            get => selectedItem;
            set
            {
                this.RaiseAndSetIfChanged(ref selectedItem, value);
                if (File.Exists(value.strFullPath))
                {
                    ExploitText = File.ReadAllText(value.strFullPath);
                }
                else
                {
                    ExploitText = "";
                }
            }
        }
        public string strFolder { get; set; }

        public Exploits()
        {
            strFolder = Environment.CurrentDirectory + @"/exploitdb/exploits"; // EDIT THIS FOR AN EXISTING FOLDER

            Items = new ObservableCollection<Node>();

            Node rootNode = new Node(strFolder);
            rootNode.SubFilesAndFolders = GetSubfoldersAndFiles(strFolder);
    
            Items.Add(rootNode);
        }
        
        public ObservableCollection<Node> GetSubfoldersAndFiles(string strPath)
        {
            ObservableCollection<Node> subfolders = new ObservableCollection<Node>();
            string[] subdirs = Directory.GetDirectories(strPath, "*", SearchOption.TopDirectoryOnly);

            foreach (string dir in subdirs)
            {
                Node thisnode = new Node(dir);

                if (Directory.GetDirectories(dir, "*", SearchOption.TopDirectoryOnly).Length > 0)
                {
                    thisnode.Subfolders = new ObservableCollection<Node>();
                    
                    thisnode.Subfolders = GetSubfoldersAndFiles(dir);
                }

                if (Directory.GetFiles(dir, "*", SearchOption.TopDirectoryOnly).Length > 0)
                {
                    thisnode.Subfiles = new ObservableCollection<Node>();
                    
                    thisnode.Subfiles = GetSubFiles(dir);
                }

                subfolders.Add(thisnode);
            }

            return subfolders;
        }

        private ObservableCollection<Node> GetSubFiles(string strPath)
        {
            ObservableCollection<Node> files = new ObservableCollection<Node>();
            string[] subfiles = Directory.GetFiles(strPath, "*", SearchOption.TopDirectoryOnly);

            foreach (string dir in subfiles)
            {
                Node thisnode = new Node(dir);
                files.Add(thisnode);
            }

            return files;
        }

        public class Node : ReactiveObject
        {
            private ObservableCollection<Node> subfolders = new ObservableCollection<Node>();
            private ObservableCollection<Node> subfiles = new ObservableCollection<Node>();

            public ObservableCollection<Node> Subfolders
            {
                get => subfolders;
                set
                {
                    this.RaiseAndSetIfChanged(ref subfolders, value);
                    this.RaisePropertyChanged("SubFilesAndFolders");
                }
            }

            public ObservableCollection<Node> Subfiles
            {
                get => subfiles;
                set
                {
                    this.RaiseAndSetIfChanged(ref subfiles, value);
                    this.RaisePropertyChanged("SubFilesAndFolders");
                }
            }

            public ObservableCollection<Node> SubFilesAndFolders
            {
                get
                {
                    ObservableCollection<Node> outFoldersAndFiles = new ObservableCollection<Node>();
                    foreach (var folder in Subfolders)
                    {
                        outFoldersAndFiles.Add(folder);
                    }
                    foreach (var file in Subfiles)
                    {
                        outFoldersAndFiles.Add(file);
                    }

                    return outFoldersAndFiles;
                }

                set
                {
                    Subfolders = new ObservableCollection<Node>();
                    Subfiles = new ObservableCollection<Node>();
                    foreach (var fileFolder in value)
                    {
                        if (File.Exists(fileFolder.strFullPath))
                        {
                            Subfiles.Add(fileFolder);
                        }

                        if (Directory.Exists(fileFolder.strFullPath))
                        {
                            Subfolders.Add(fileFolder);
                        }
                    }
                    this.RaisePropertyChanged();
                }
            }

            public string strNodeText { get; }
            public string strFullPath { get; }

            public Node(string _strFullPath)
            {
                strFullPath = _strFullPath;
                strNodeText = Path.GetFileName(_strFullPath);
            }
        }
    }
}